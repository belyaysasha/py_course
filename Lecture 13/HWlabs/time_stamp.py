import datetime  # Импортируем модуль datetime для работы с датой и временем


# Декоратор для печати временной метки

def time_stamping_machine(func):

    """

    Декоратор, который добавляет функциональность печати временной метки
    перед вызовом оборачиваемой функции.

    func: Функция, которую мы оборачиваем
    return: Обернутая функция, которая добавляет временную метку

    """

    def wrapper(*args, **kwargs):

        """

        Внутренняя функция, которая будет вызываться вместо оригинальной функции.
        args: Позиционные аргументы, переданные оригинальной функции
        kwargs: Именованные аргументы, переданные оригинальной функции
        return: Результат выполнения оригинальной функции

        """

        # Получаем текущее время в виде объекта datetime
        current_time = datetime.datetime.now()

        # Форматируем текущее время в строку с нужным форматом (ГГГГ-ММ-ДД ЧЧ:ММ:СС)
        timestamp = current_time.strftime("%Y-%m-%d %H:%M:%S")

        # Печатаем сообщение с названием функции и временной меткой
        print(f"Вызов функции '{func.__name__}' в {timestamp}")

        # Вызываем оригинальную функцию с переданными аргументами и возвращаем её результат
        return func(*args, **kwargs)

    # Возвращаем внутреннюю функцию-обертку вместо оригинальной функции
    return wrapper


# Простая функция, которая выводит приветствие

@time_stamping_machine  # Применяем декоратор к этой функции
def simple_hello():

    """

    Функция, которая выводит приветствие на экран.

    """
    
    print("Привет, мир!")  # Печатаем приветствие


# Функция для сложения двух чисел
@time_stamping_machine  # Применяем декоратор к этой функции
def add_two_objects(n1, n2):
    return n1 + n2  # Возвращаем сумму двух чисел

# Функция для умножения двух чисел
@time_stamping_machine  # Применяем декоратор к этой функции
def multiply_two_objects(n1, n2):
    return n1 * n2  # Возвращаем произведение двух чисел


# Пример использования функций

if __name__ == "__main__":
    
    simple_hello()  # Вызов функции с временной меткой, печатается "Привет, мир!"
    
    try:
        num1_add = float(input("Введите первое число: "))
        num2_add = float(input("Введите второе число: "))

        result_add = add_two_objects(num1_add, num2_add)  # Передаем числа для сложения
        print(f"Результат сложения: {result_add}")  # Печатаем результат сложения

    except ValueError:
        print ("Ошибка, введите число")

    
    try:
        num1_mult = float(input("Введите первое число: "))
        num2_mult = float(input("Введите второе число: "))

        result_multiply = multiply_two_objects(num1_mult, num2_mult)  # Передаем числа для умножения
        print(f"Результат умножения: {result_multiply}")  # Печатаем результат умножения

    except ValueError:
        print ("Ошибка, введите число")